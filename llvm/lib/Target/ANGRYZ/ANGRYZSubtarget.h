#ifndef LLVM_LIB_TARGET_ANGRYZ_ANGRYZSUBTARGET_H
#define LLVM_LIB_TARGET_ANGRYZ_ANGRYZSUBTARGET_H

#include "ANGRYZRegisterInfo.h"
#include "MCTargetDesc/ANGRYZBaseInfo.h"
#include "ANGRYZFrameLowering.h"
#include "ANGRYZISelLowering.h"
#include "ANGRYZInstrInfo.h"
#include "llvm/CodeGen/SelectionDAGTargetInfo.h"
#include "llvm/CodeGen/TargetSubtargetInfo.h"
#include "llvm/IR/DataLayout.h"
#include "llvm/Target/TargetMachine.h"
#include <bitset>

#define GET_SUBTARGETINFO_HEADER
#include "ANGRYZGenSubtargetInfo.inc"

namespace llvm {

class ANGRYZTargetMachine;

class ANGRYZSubtarget : public ANGRYZGenSubtargetInfo{
private:
  ANGRYZFrameLowering FrameLowering;
  ANGRYZInstrInfo InstrInfo;
  ANGRYZRegisterInfo RegInfo;
  ANGRYZTargetLowering TLInfo;

  ANGRYZABI::ABI TargetABI = ANGRYZABI::ABI_ILP32;
  std::bitset<ANGRYZ::NUM_TARGET_REGS> UserReservedRegister;

  /// Initializes using the passed in CPU and feature strings so that we can use initializer lists for subtarget initialization.
  ANGRYZSubtarget &initializeSubtargetDependencies(const Triple &TT,
                                                  StringRef CPU,
                                                  StringRef TuneCPU,
                                                  StringRef FS,
                                                  StringRef ABIName);
    
#define GET_SUBTARGETINFO_MACRO(ATTRIBUTE, DEFAULT, GETTER) \
  bool ATTRIBUTE = DEFAULT;
#include "ANGRYZGenSubtargetInfo.inc"

public:
  /*
      subtarget的构造函数 
      instr,reg,targetlowing, framelowering的get方法
  */
  ANGRYZSubtarget(const Triple &TT, StringRef CPU, StringRef TuneCPU,
                StringRef FS, StringRef ABIName, const TargetMachine &TM);

  const ANGRYZFrameLowering *getFrameLowering() const override {
      return &FrameLowering;
  }
  const ANGRYZInstrInfo *getInstrInfo() const override {
      return &InstrInfo;
  }
  const ANGRYZRegisterInfo *getRegisterInfo() const override {
      return &RegInfo;
  }
  const ANGRYZTargetLowering *getTargetLowering() const override {
      return &TLInfo;
  }
  ANGRYZABI::ABI getTargetABI() const {
    return TargetABI;
  }

#define GET_SUBTARGETINFO_MACRO(ATTRIBUTE, DEFAULT, GETTER) \
  bool GETTER() const { return ATTRIBUTE; }
#include "ANGRYZGenSubtargetInfo.inc"

    // Parses features string setting specified subtarget options. The
    // definition of this function is auto-generated by tblgen.
    void ParseSubtargetFeatures(StringRef CPU, StringRef TuneCPU, StringRef FS);


  bool is64Bit() const {
    return false;
  }

  bool isRegisterReservedByUser(Register i) const {
    assert(i < ANGRYZ::NUM_TARGET_REGS && "Register out of range");
    return UserReservedRegister[i];
  }
}; 

}   // namespace llvm


#endif